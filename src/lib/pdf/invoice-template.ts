import Handlebars from "handlebars"

// Base HTML template for invoice PDF rendering
const baseTemplate = `<!doctype html>
<html><head><meta charset="utf-8" />
<style>
  @font-face { font-family: Inter; font-weight: 400; src: local('Inter'); }
  body { font-family: Inter, system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; font-size: 12px; color: #111; }
  h1 { font-size: 22px; margin: 0 0 10px; font-weight: 700; letter-spacing: .2px; }
  .container { max-width: 760px; margin: 0 auto; padding: 22px; }
  .row { display:flex; justify-content: space-between; margin: 6px 0; gap: 16px; }
  .muted { color:#6b7280; }
  .card { border: 1px solid #e5e7eb; border-radius: 10px; padding: 12px 14px; background: #fff; }
  .brand { font-weight: 700; font-size: 18px; }
  .pill { padding: 2px 8px; border-radius: 999px; background:#111; color:#fff; font-size:11px; font-weight:600 }
  .grid { display:grid; grid-template-columns: 1fr 1fr; gap:16px }
  table { width:100%; border-collapse: collapse; margin-top: 12px; }
  th, td { border-bottom: 1px solid #e5e7eb; padding: 10px 8px; text-align: left; }
  thead th { background: #f9fafb; font-weight: 600; color:#374151 }
  tbody tr:nth-child(odd) td { background:#fcfcfd }
  .total { text-align: right; font-weight: 700; }
  .footer { margin-top: 18px; font-size: 11px; color:#6b7280 }
  .paid-banner { margin:8px 0 12px; padding:10px 12px; border:1px solid #d1fae5; background:#ecfdf5; color:#065f46; font-weight:700; border-radius:8px }
</style>
</head><body>
  <div class="container">
    {{#if paid_banner_date}}<div class="paid-banner">PAID on {{paid_banner_date}}</div>{{/if}}
    <div class="row" style="align-items:center">
      <div class="brand">{{user_business_name}}</div>
      {{#if is_receipt}}<div class="pill">RECEIPT</div>{{else}}<div class="pill">INVOICE</div>{{/if}}
    </div>
    <h1>#{{invoice_number}}</h1>
    <div class="grid">
      <div class="card">
        <div class="muted" style="margin-bottom:4px">Bill To</div>
        <div style="font-weight:600">{{customer_name}}</div>
        {{#if customer_contact_name}}<div>{{customer_contact_name}}</div>{{/if}}
        {{#if customer_email}}<div>{{customer_email}}</div>{{/if}}
        {{#if customer_phone}}<div>{{customer_phone}}</div>{{/if}}
        {{#if venue_name}}
          <div class="muted" style="margin-top:8px">Venue</div>
          <div>{{venue_name}}</div>
          <div>{{venue_city}} {{venue_postcode}}</div>
          {{#if venue_phone}}<div>{{venue_phone}}</div>{{/if}}
        {{/if}}
      </div>
      <div class="card">
        <div class="row"><div class="muted">Issue</div><div>{{issue_date}}</div></div>
        <div class="row"><div class="muted">Due</div><div>{{due_date}}</div></div>
        {{#if status}}
        <div class="row"><div class="muted">Status</div><div style="font-weight:600">{{status}}</div></div>
        {{/if}}
      </div>
    </div>

    <table style="margin-top:16px">
    <thead><tr><th>Description</th><th style="width:120px">Amount</th></tr></thead>
    <tbody>
        {{#each payments}}
          <tr><td>{{this.desc}}</td><td style="text-align:right">{{this.amountFormatted}}</td></tr>
        {{/each}}
    </tbody>
  </table>

    <div class="total" style="margin-top:10px">Total: {{totalFormatted}}</div>

    {{#if notes}}
      <div class="card" style="margin-top:14px">
        <div class="muted">Notes</div>
        <div>{{notes}}</div>
      </div>
    {{/if}}

    {{#if include_bank_account}}
      {{#if bank_account}}
      <div class="card" style="margin-top:14px">
        <div class="muted" style="margin-bottom:6px">Bank Account</div>
        <div style="font-weight:600">{{bank_account.name}}</div>
        {{#if bank_account.bankName}}<div>{{bank_account.bankName}}</div>{{/if}}
        {{#if bank_account.accountHolder}}<div>Account holder: {{bank_account.accountHolder}}</div>{{/if}}
        {{#if bank_account.accountNumberOrIban}}<div>Account/IBAN: {{bank_account.accountNumberOrIban}}</div>{{/if}}
        {{#if bank_account.sortCodeOrBic}}<div>Sort/BIC: {{bank_account.sortCodeOrBic}}</div>{{/if}}
        {{#if bank_account.currency}}<div>Currency: {{bank_account.currency}}</div>{{/if}}
      </div>
      {{/if}}
    {{/if}}

    {{#if payment_link}}
      <div class="card" style="margin-top:14px">
        <div class="muted">Payment Link</div>
        <div><a href="{{payment_link}}">{{payment_link}}</a></div>
      </div>
    {{/if}}

    <div class="footer">Generated by Indie Suite</div>
  </div>
</body></html>`

function formatCurrency(amount: number, currency: string) {
  try { return new Intl.NumberFormat("en-GB", { style: "currency", currency }).format(amount) } catch { return `${currency} ${Number(amount||0).toFixed(2)}` }
}

function formatDate(iso?: unknown) {
  if (typeof iso !== "string" || !iso) return iso as string | undefined
  try {
    const [y, m, d] = iso.split("-").map((s) => parseInt(s, 10))
    const dt = new Date(y, (m || 1) - 1, d)
    return new Intl.DateTimeFormat("en-GB", { day: "2-digit", month: "short", year: "numeric" }).format(dt)
  } catch {
    return iso
  }
}

export function formatInvoiceData(raw: Record<string, unknown>) {
  const payments = Array.isArray(raw.payments) ? raw.payments as Array<{ currency?: string; amount?: number; name?: string; reference?: string }> : []
  const currency = payments[0]?.currency || (raw as { currency?: string }).currency || "GBP"
  const totalNum = payments.reduce((s, p) => s + (Number(p.amount || 0) || 0), 0)
  const paymentsFmt = payments.map(p => {
    const name = (p.name || "").trim()
    const ref = (p.reference || "").trim()
    const desc = name ? (ref ? `${name} â€“ ${ref}` : name) : (ref || name || "Payment")
    return { ...p, desc, amountFormatted: formatCurrency(Number(p.amount||0), p.currency || currency) }
  })
  return {
    ...raw,
    issue_date: formatDate((raw as { issue_date?: string }).issue_date),
    due_date: formatDate((raw as { due_date?: string }).due_date),
    payments: paymentsFmt,
    currency,
    total: totalNum.toFixed(2),
    totalFormatted: formatCurrency(totalNum, currency),
  }
}

export function renderInvoiceHtml(data: Record<string, unknown>): string {
  const tpl = Handlebars.compile(baseTemplate)
  return tpl(formatInvoiceData(data))
}


